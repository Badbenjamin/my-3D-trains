/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'

import Station from './Station'



export default function GLine(props) {

     const { nodes, materials } = useGLTF('./public/subway_map_just_G_stations+tracks.glb')
    console.log(props)
     

    //  const [stationObjs, setStationObjs] = useState({})
     const [stationArray, setStationArray] = useState([])
     const [statusArray, setStatusArray] = useState([])
     const [version, setVersion] = useState(0)
    // console.log("SA", statusArray)

  useEffect(()=>{
    
    const newStationObj ={}
    const newStatusArray = []

    function setStatus(func){
        console.log(func)
    }

    let count = 0
    for (const mesh in nodes){
        if (nodes[mesh].type === "Mesh"){
            const status = {"name": nodes[mesh].name, "status": false}
            newStatusArray.push(status)
            
        } 
      }
    for (const mesh in nodes){
        if (nodes[mesh].type === "Mesh"){
            let index = count 
            count += 1
            newStationObj[mesh] = <Station setStatus={setStatus} name={nodes[mesh].name} status={newStatusArray[index]} index={[index]} key={nodes[mesh].name} nodes={nodes} mesh={nodes[mesh]} materials={materials}/>
            
        } 
      }
     const newStationArray = [...stationArray]

     for (const station in newStationObj){
        // why is station array an object?
        if (!newStationArray.includes(station)){
            newStationArray.push(newStationObj[station])
        }
     }
    setStatusArray(newStatusArray)
    setStationArray(newStationArray)
    
  }, [])
 
  const nameArray = ['01_Court_Sq_G', '02_21_St_G', '03_Greenpoint_Ave_G', "11_Clinton_Washington_G", "015_Court_21t_S" ]
  function selectStations(array){
    function updateVersion(){
        setVersion(version + 1)
    }
    updateVersion()
    console.log(version)

    const newStatusArray = [...statusArray]
    for (const name of array){
        for (const status of newStatusArray){
            if (name === status['name']){
                status['status'] = true
            }
        }
    }
    setStatusArray(newStatusArray)

    const newStationArray = [...stationArray]
    // console.log(statusArray)
    const alteredStationArray = newStationArray.map((station, i) => {
        console.log(station)
        const newStation = {...station}
        const newStationName = newStation['props']['name']
        let newStationStatus = newStation['props']['status']['status']
        for (const status of newStatusArray){
            if (status['name'] === newStationName){
                newStationStatus = status['status']
                console.log(newStation['key'])
                newStation['key'] =  version
            }
        }
        return newStation
    })
    setStationArray(alteredStationArray)
  }
  console.log(statusArray)

function groupClick(){
    selectStations(nameArray)
}

  if (stationArray == []){
    return(
        <>loading</>
    )
  }

  return (
    <group onClick={groupClick} {...props} dispose={null}>
        {stationArray}
    </group>
  )
}

useGLTF.preload('./public/subway_map_just_G_stations.glb')
