/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'

import Station from './Station'



export default function GLine(props) {

     const { nodes, materials } = useGLTF('./public/subway_map_just_G_stations.glb')

     

     const [stationObjs, setStaionObjs] = useState({})
     const [stationArray, setStationArray] = useState([])
     const [statusArray, setStatusArray] = useState([])
    console.log(nodes)
  

    // maybe I could clean up stationObjs and StationArray
  
  useEffect(()=>{
   
    
   
  }, [])



  useEffect(()=>{
    const newStationObj ={...stationObjs}
    let newStatusArray = [...statusArray]

    let count = 0
    for (const mesh in nodes){
        
        if (nodes[mesh].type === "Mesh"){
            const status = false
            newStatusArray.push(status)
            
        } 
      }
    for (const mesh in nodes){
        if (nodes[mesh].type === "Mesh"){
            
            let index = count 
            count += 1
            newStationObj[mesh] = <Station name={nodes[mesh].name} status={newStatusArray[index]} index={[index]} key={nodes[mesh].name} props={props} nodes={nodes} mesh={nodes[mesh]} materials={materials}/>
            
        } 
      }
    setStaionObjs(newStationObj)
    setStatusArray(newStatusArray)
  }, [])

  


  useEffect(()=>{
    //   build array here for react child
    const newStationArray = [...stationArray]

    for (const station in stationObjs){
        newStationArray.push(stationObjs[station])
    }
    setStationArray(newStationArray)
  }, [stationObjs])



  function updateStatusArrayByStation(index){
    const alteredStatusArray = [...statusArray]
    alteredStatusArray[index] = true
    console.log("asa", alteredStatusArray)

    const newStationObj ={...stationObjs}
    

    let count = 0
    for (const mesh in nodes){
        if (nodes[mesh].type === "Mesh"){
            
            let index = count 
            count += 1
            newStationObj[mesh] = <Station name={nodes[mesh].name} status={alteredStatusArray[index]} index={[index]} key={nodes[mesh].name} props={props} nodes={nodes} mesh={nodes[mesh]} materials={materials}/>
            
        } 
      }
    setStaionObjs(newStationObj)
    setStatusArray(alteredStatusArray)
    // ADD BACK
    // setStatusArray(alteredStatusArray)
  }

  console.log("SOBJS", stationObjs)
  console.log("StationA", stationArray)
  console.log("StatusA", statusArray)

  useEffect(()=>{
    updateStatusArrayByStation(0)
  }, [])



if (true){
    // updateStatusArrayByStation(0)
}


  if (stationArray == []){
    return(
        <>loading</>
    )
  }

  return (
    <group {...props} dispose={null}>
        {stationArray}
    </group>
  )
}

useGLTF.preload('./public/subway_map_just_G_stations.glb')
