/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'

import Station from './Station'



export default function GLine(props) {

     const { nodes, materials } = useGLTF('./public/subway_map_just_G_stations+tracks.glb')

     

    //  const [stationObjs, setStationObjs] = useState({})
     const [stationArray, setStationArray] = useState([])
     const [statusArray, setStatusArray] = useState([])
    console.log("SA", statusArray)

  useEffect(()=>{
    
    const newStationObj ={}
    const newStatusArray = []

    let count = 0
    for (const mesh in nodes){
        
        if (nodes[mesh].type === "Mesh"){
            // console.log(mesh)
            const status = {"name": nodes[mesh].name, "status": false}
            newStatusArray.push(status)
            
        } 
      }
    for (const mesh in nodes){
        if (nodes[mesh].type === "Mesh"){
            
            let index = count 
            count += 1
            // store station in its
            newStationObj[mesh] = <Station name={nodes[mesh].name} status={newStatusArray[index]} index={[index]} key={nodes[mesh].name} nodes={nodes} mesh={nodes[mesh]} materials={materials}/>
            
        } 
      }

     //   build array here for react child
     const newStationArray = [...stationArray]

     for (const station in newStationObj){
        // console.log(stationArray.includes(newStationObj[station]))
        // why is station array an object?
        if (!newStationArray.includes(station)){
            newStationArray.push(newStationObj[station])
        }
         
     }
     
    
    
    setStatusArray(newStatusArray)
    
    // setStationObjs(newStationObj)

    setStationArray(newStationArray)
    
  }, [])
//   console.log("SA", statusArray)
 
  const nameArray = ['01_Court_Sq_G', '02_21_St_G', '03_Greenpoint_Ave_G' ]
  function selectMeshes(array){
    let count = 0
    const newStatusArray = [...statusArray]
    console.log(newStatusArray)
    for (const name of nameArray){
        // console.log(name)
        for (const status of newStatusArray){
            // console.log(status['name'])
            if (name === status['name']){
                status['status'] = true
            }
        }
    }
    const newStationObj ={}
    
    for (const mesh in nodes){
        if (nodes[mesh].type === "Mesh"){
            
            let index = count 
            count += 1
            // store station in its
            newStationObj[mesh] = <Station name={nodes[mesh].name} status={newStatusArray[index]} index={[index]} key={nodes[mesh].name} nodes={nodes} mesh={nodes[mesh]} materials={materials}/>
            
        } 
      }
      const newStationArray = []
      for (const station in newStationObj){
        // console.log(stationArray.includes(newStationObj[station]))
        // why is station array an object?
        if (!newStationArray.includes(station)){
            newStationArray.push(newStationObj[station])
        }
    setStatusArray(newStatusArray)
    setStationArray(newStationArray)
    
  }
  }

//   useEffect(()=>{
//     const newStationArray = [...stationArray]
//     for (const mesh of stationArray){ 
//             stationArray.push(<Station name={nodes[mesh].name} status={statusArray[index]} index={[index]} key={nodes[mesh].name} nodes={nodes} mesh={nodes[mesh]} materials={materials}/>)
//       }
//       setStationArray(newStationArray)
    

//   }, [statusArray])
//   selectMeshes(nameArray)

function groupClick(){
    selectMeshes(nameArray)
}

  if (stationArray == []){
    return(
        <>loading</>
    )
  }

  return (
    <group onClick={groupClick} {...props} dispose={null}>
        {stationArray}
    </group>
  )
}

useGLTF.preload('./public/subway_map_just_G_stations.glb')
