/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'

import Station from './Station'



export default function GLine(props) {

     const { nodes, materials } = useGLTF('./public/subway_map_just_G_stations+tracks.glb')

     

     const [stationObjs, setStationObjs] = useState({})
     const [stationArray, setStationArray] = useState([])
     const [statusArray, setStatusArray] = useState(["hello"])
    console.log("SA", statusArray)
  
    function gClickHandler(index){
        // console.log(index)
        // updateStatusArrayByStation(index)
        console.log(stationObjs)
        console.log(stationArray)

      }



  useEffect(()=>{
    const newStationObj ={...stationObjs}
    let newStatusArray = [...statusArray]

    let count = 0
    for (const mesh in nodes){
        
        if (nodes[mesh].type === "Mesh"){
            const status = false
            newStatusArray.push(status)
            
        } 
      }
    for (const mesh in nodes){
        if (nodes[mesh].type === "Mesh"){
            
            let index = count 
            count += 1
            // store station in its
            newStationObj[mesh] = <Station name={nodes[mesh].name} status={newStatusArray[index]} index={[index]} key={nodes[mesh].name} nodes={nodes} mesh={nodes[mesh]} materials={materials}/>
            
        } 
      }

     //   build array here for react child
     const newStationArray = [...stationArray]

     for (const station in newStationObj){
         newStationArray.push(newStationObj[station])
     }
     
    
    
    setStatusArray(newStatusArray)
    
    setStationObjs(newStationObj)

    setStationArray(newStationArray)
    
  }, [])
  console.log("SA", statusArray)
 


//   useEffect(()=>{
//     //   build array here for react child
//     const newStationArray = [...stationArray]

//     for (const station in stationObjs){
//         newStationArray.push(stationObjs[station])
//     }
//     setStationArray(newStationArray)
//   }, [stationObjs])


//   console.log(statusArray)
  function updateStatusArrayByStation(index){
    // console.log(statusArray)
    const alteredStatusArray = [...statusArray]
    alteredStatusArray[index] = true
    // console.log("asa", alteredStatusArray)
    console.log(statusArray)
    // console.log("stationObjs)
    const newStationObj ={...stationObjs}
    
    
    let count = 0
    // for (const mesh in newStationObj){
    //         let index = count 
    //         count += 1
    //         newStationObj[mesh] = <Station name={nodes[mesh].name} status={alteredStatusArray[index]} index={[index]} key={nodes[mesh].name} props={props} nodes={nodes} mesh={nodes[mesh]} materials={materials}/> 
    //   }
    
    // setStaionObjs(newStationObj)
    // setStatusArray(alteredStatusArray)
    // ADD BACK
    // setStatusArray(alteredStatusArray)
  }

  console.log("SOBJS", stationObjs)
//   console.log("StationA", stationArray)
//   console.log("StatusA", statusArray)

  if (stationArray == []){
    return(
        <>loading</>
    )
  }

  return (
    <group onClick={()=>(console.log(stationObjs))} {...props} dispose={null}>
        {stationArray}
    </group>
  )
}

useGLTF.preload('./public/subway_map_just_G_stations.glb')
